#+hugo_base_dir: /home/devinkin/hugo_blog
#+hugo_section:  ./post/FrontEndLearning/CSSAuthGuide
#+title: CSS权威指南-第2章-选择器
#+author:
#+hugo_custom_front_matter: :author "devinkin"
#+hugo_weight: auto
#+hugo_auto_set_lastmod: t
#+hugo_categories: CSS
#+hugo_tags: CSS 前端
* 第2章-选择器
** 基本规则
*** 规则结构
    每个规则都有两个部分
    - 选择器(selector)
    - 声明块(declaration block)
      - 声明块由一个或多个声明组成, 每个声明则是一个属性-值对.
      
*** 元素选择器
    最常见的选择器往往是HTML元素.
*** 声明和关键字
    声明的值要么是一个关键字, 要么是该属性可取关键字的一个列表(包含一个或多个关键字), 关键字使用空格分开.
** 分组
*** 选择器分组
    可以将任意多个选择器分组在一起, 使用逗号进行分隔, 对此没有任何限制.
    #+begin_src css
      /* html {
          color: black;
      }

      p {
          color: grey;
          font: medium Helvetica;
      }

      h2 {
          color: silver;
      } */

      /* group 1 */
      h1 {
          color: silver;
          background: white;
      }

      h2 {
          color: silver;
          background: gray;
      }

      h3 {
          color: white;
          background: gray;
      }

      h4 {
          color: silver;
          background: white;
      }

      b {
          color: gray;
          background: white;
      }


      /* group 2 */
      h1,
      h2,
      h4 {
          color: silver
      }

      h3 {
          color: white;
      }

      b {
          color: gray;
      }

      h2,
      h3 {
          background: gray;
      }

      h1,
      h4,
      b {
          background: white;
      }


      /* group 3 */
      h1,
      h4 {
          color: silver;
          background: white;
      }

      h2 {
          color: silver;
      }

      h3 {
          color: white;
      }

      h2,
      h3 {
          background: gray;
      }

      b {
          color: gray;
          background: white;
     
    #+end_src

*** 通配选择器
    ~*~ 为通配选择器, 可以与任何元素匹配.

*** 声明分组
    对声明分组时候, 最后要使用分号.
    #+begin_src css
      h1 {
          font: 18px Helvetica;
          color: purple;
          background: aqua;
      }
    #+end_src
** 类选择器和ID选择器
*** 类选择器
    类选择器适合于应用样式而不考虑具体涉及的元素. 需要在元素中标明 ~class~ 属性.

    类名前有一个点号(.)使用元素选择器. 可以使用元素选择器和类选择器组合.

    可以在类选择器中忽略通配符(*).
    #+begin_src css
      .warning {
    
      }

      p.warning {
	  font-weight: bold;
      }

      span.warning {
	  font-weight: bold;
      }
    #+end_src

*** 多类选择器
    在HTML中, 一个 ~class~ 值中可能包含一个词列表, 各个词之间用空格分隔.
    #+begin_src html
      <p class="urgent warning">When handing plutonium, care must be taken to avoid the formation of a cntical mass.</p>
    #+end_src

    两个类选择器连接在一起, 仅可以选择同时包含这些类名的元素(类名的顺序不限).
    #+begin_src css
      .urgent {
          font-style: italic;
      }

      .warning {
          font-weight: bold;
      }

      .warning.urgent{
          background: silver;
      }
    #+end_src

*** ID选择器
    ID选择器使用 ~#~ 号, ID选择器引用id属性的值.
*** 类选择器还是ID选择器
    ID选择器会使用一次, 而且仅一次.

    ID选择器不能结合使用, 因为ID属性不允许有以空格分隔的词列表.
*** 属性选择器
    如果希望选择某个属性的元素, 不论该属性的值是什么, 可以选择属性选择器.
    #+begin_src css
      h1 [class] {color: silver;}
    #+end_src

    可以根据多个属性进行选择, 只需要将属性选择器链接在一起即可.
    #+begin_src css
      a [href] [title] {font-weight: bold;}
    #+end_src

*** 根据具体属性值选择
    可以把多个属性-值选择器链接在一起来选择一个文档.
    #+begin_src css
      a[href="http://www.w3.org/"][title="W3C Home"] {
          font-size: 200%;
      }
    #+end_src

*** 根据部分属性值选择
    如果属性能接收词列表(词之间用空格分隔), 可以根据其中的任意一个词进行选择.

    HTML的class属性能接受一个或多个词作为其属性值.
    #+begin_src css
      p[class~="warning"] {
          font-weight: bold;
      }
    #+end_src

    ~~=~ 能用于任何属性. 不仅仅是class

    子串匹配属性选择器
    | 类型         | 描述                                   |
    |--------------+----------------------------------------|
    | [foo^="bar"] | 选择foo属性值以"bar"开头的所有元素     |
    | [foo$="bar"] | 选择foo属性值以"bar"结尾的所有元素     |
    | [foo*="bar"] | 选择foo属性值中包含子串"bar"的所有元素 |
** 使用文档结构
   如果一个元素出现在文档层次结构中另一个元素的上一层, 则称前者是后者的父元素.

   如果一个元素出现在文档层次结构中另一个元素的下一层, 则称前者是后者的子元素.

*** 后代选择器
    后代选择器的范围是某个元素的所有子元素及子子元素.

    在一个后代选择器中, 规则左边的选择器一端包括两个或多个用空格分隔的选择器, 选择器之间的空格是一种结合符.
    #+begin_src css
      ul ol ul em {color: grey;}
    #+end_src

*** 子选择器
    子选择器的范围是某个元素的下的子元素.

    某些情况下, 并不想选择一个任意的后代元素(父元素对应的所有子元素), 而是选择另一个元素的子元素, 可以使用子结合符 ~>~ .
    #+begin_src css
      h1 > strong {
          color: red;
      }
    #+end_src

    可以在同一个选择器中结合使用后代选择器和子选择器. 下例选择一个作为td元素子元素的所有p元素, 这个td元素本身从table元素继承, 该table元素包含summary的class属性.
    #+begin_src css
      table.summary td > p
    #+end_src

*** 选择相邻兄弟元素
    要选择紧接着另一个元素后的元素, 而且二者相同的父元素, 可以使用相邻兄弟结合符 ~+~ .
    #+begin_src css
      /* h1元素后出现的段落上边距 */
      h1 + p {
          margin-top: 0;
      }
    #+end_src

    用一个结合符只能选择两个相邻的第二个元素. 因此, ~li+li {font-weight: bold;}~ , 只会把各列表的第二个和第三个列表项变成粗体, 第一个列表项不会受到影响.
    #+begin_src html
          <div>
              <ol>
                  <li>1. List item 1</li>
                  <li>2. List item 1</li>
                  <li>3. List item 1</li>
              </ol>
              This is some text that is part of the 'div'
              <ul>
                  <li>A list item</li>
                  <li>Another list item</li>
                  <li>Yet another list item</li>
              </ul>
          </div>
    #+end_src
*** 伪类选择器
    ~:root~ 伪类选择器选择文档的根元素.

    ~:empty~ 伪类选择器选择任何没有子节点的元素.
    
    ~:only-child~ 伪类选择器选择唯一子元素的元素.

    ~:only-of-type~ 会匹配那些在所有兄弟元素中是唯一一个此类型的元素.

    链接的静态伪类
    | 伪类名   | 描述                                                          |
    |----------+---------------------------------------------------------------|
    | :link    | 指示作为超链接(即有一个href属性)并指向一个为访问地址的所有锚. |
    | :visited | 指示作为一访问地址超链接的所有锚.                             |

    CSS2.1定义了3个动态伪类, 它们可以根据用户行为改变文档的外观.
    | 伪类名  | 描述                                                                   |
    |---------+------------------------------------------------------------------------|
    | :focus  | 指示当前拥有输入焦点的元素, 可以接收键盘输入或者能以某种方式激活的元素 |
    | :hover  | 指示鼠标指针停留在哪个元素上.                                          |
    | :active | 指示用户输入激活的元素.                                                         |

    #+begin_src css
      input:focus {
          background: silver;
          font-weight: bold;
      }
      /* body 下所有元素聚焦时候都会变黄 */
      body *:hover {
          background: yellow;
      }
    #+end_src

    动态伪类带来一个奇怪的问题, 可以将已访问和为访问的链接设置为一种字体大小, 鼠标停留的链接有更大的字体.
    #+begin_src css
      a:link, a:visited {
          font-size: 13px;
      }
      a:hover {
          font-size: 20px;
      }
    #+end_src

**** 选择第一个子元素
    静态伪类 ~:first-child~ 可以用来选择所有其他元素的第一个子元素.

    静态伪类 ~:last-child~ 可以用来选择所有其他元素的最后一个子元素.

    ~:first-type-of~ 伪类选择元素中第一个某种类型的子元素.

    ~:last-type-of~ 伪类选择元素中最后一个某种类型的子元素.
    #+begin_src css
      /* 将作为某元素第一个子元素的所有p元素设置为粗体 */
      p:first-child {
          font-weight: bold;
      }
      /* 将作为某个元素第一个子元素的所有li元素变成大写 */
      li:first-child {
          text-transform: uppercase;
      }
    #+end_src

**** 根据语言选择
    ~:lang()~ 伪类可以根据元素的语言来选择.
    #+begin_src css
      *:lang(en) {
          font-style: italic;
      }
    #+end_src
    
    HTML可以用 ~meta~ 元素的 ~lang~ 属性使用该伪类选择器.

**** 结合伪类
    伪类之间可以结合使用.
    #+begin_src css
      a:link:hover {
          color: red;
      }

      a:visited:hover {
          color: maroon;
      }
    #+end_src
     
**** 选择第n个子元素
     ~:nth-child()~ 伪类选择第n个子元素. 从1开始计数.

     可以使用简单的算术表达式来定义循环选择.
     #+begin_src css
       ul > li:nth-child(3n + 1) {
           text-transform: uppercase;
       }
     #+end_src
*** UI状态伪类
    | 名称           | 描述                           |
    |----------------+--------------------------------|
    | :enabled       | 表明用户元素能输入和点击等     |
    | :disabled      | 用户元素不能输入或点击         |
    | :checked       | 按钮或者单选被选中             |
    | :indeterminate | 按钮或者选择按钮被选中或没选中 |
    | :default       | 按钮,单选框或者选项被默认选择  |
    | :valid         | 用户的有效输入                 |
    | :invalid       | 用户的无效输入                 |
    | :in-range      | 用户输入在最大和最小值之间     |
    | :out-of-range  | 用户输入超过最大值或小于最小值 |
    | :required      | 必须有值集的用户输入           |
    | :optional      | 不必须有值集的用户输入         |
    | :read-write    | 可编辑的用户输入               |
    | :read-only     | 只读的用户输入                     |

*** 否定伪类
    ~:not()~ 括号中填写简单的选择器(不包含祖先-后代关系的选择器): 
    - 类型选择器
    - 通配选择器
    - ID选择器
    - 伪类中的一个

** 伪元素选择器
    CSS2.1中定义了4个伪元素：
    - 设置首字母样式 ~::first-letter~
    - 设置第一行样式 ~::first-line~
    - 设置之前和之后元素的样式 ~::before~ 和 ~::after~
      
    ~::first-letter~ 和 ~::first-line~ 只能应用于标记或段落之类的块级元素, 不能用于超链接等行内元素.
